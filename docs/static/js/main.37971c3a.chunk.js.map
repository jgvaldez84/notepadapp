{"version":3,"sources":["Reducer.js","App.js","graphql/queries.js","graphql/mutations.js","graphql/subscriptions.js","reportWebVitals.js","aws-exports.js","index.js"],"names":["initialState","notes","sortMethod","loading","error","form","name","description","reducer","state","action","type","note","newNotes","filter","x","id","updatedNoteIndex","findIndex","n","value","newSortMethod","sortedNotes","sort","a","b","CLIENT_ID","uuid","App","useReducer","dispatch","fetchNotes","API","graphql","query","notesData","data","listNotes","items","console","createNote","alert","clientId","completed","variables","input","log","deleteNote","updateNote","index","onChange","e","target","useEffect","createSubscription","subscribe","next","noteData","onCreateNote","deleteSubscription","noteId","onDeleteNote","updateSubscription","updatedNote","onUpdateNote","unsubscribe","styles","container","padding","marginBottom","item","textAlign","p","color","style","placeholder","onClick","length","dataSource","renderItem","Item","actions","checked","Meta","title","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","awsmobile","Amplify","configure","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.37971c3a.chunk.js","sourcesContent":["const initialState = {\n  notes: [],\n  sortMethod: \"AZ\",\n  loading: true,\n  error: false,\n  form: { name: \"\", description: \"\" },\n};\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case \"SET_NOTES\":\n      return { ...state, notes: action.notes, loading: false };\n    case \"ADD_NOTE\":\n      return { ...state, notes: [action.note, ...state.notes] };\n    case \"REMOVE_NOTE\":\n      const newNotes = state.notes.filter((x) => x.id !== action.id);\n      return { ...state, notes: newNotes };\n      case 'UPDATE_NOTE':\n        const updatedNoteIndex = state.notes.findIndex(n => n.id === action.note.id)  \n        const notes = [...state.notes]\n        if (updatedNoteIndex !== -1) { // note was found\n            notes[updatedNoteIndex] = action.note;\n        }\n        return{...state, notes: notes}\n    case \"RESET_FORM\":\n      return { ...state, form: initialState.form };\n    case \"SET_INPUT\":\n      return { ...state, form: { ...state.form, [action.name]: action.value } };\n    case \"SORT\":\n      let newSortMethod, sortedNotes;\n      if (state.sortMethod === \"AZ\") {\n        //sort z-a\n        newSortMethod = \"ZA\";\n        // new variable is assigned a new array of sorted notes\n        sortedNotes = state.notes.sort((a, b) => (a.name > b.name ? 1 : -1));\n      } else {\n        newSortMethod = \"AZ\";\n        sortedNotes = state.notes.sort((a, b) => (a.name < b.name ? 1 : -1));\n      }\n      return { ...state, notes: sortedNotes, sortMethod: newSortMethod };\n    case \"ERROR\":\n      return { ...state, loading: false, error: true };\n    default:\n      return { ...state };\n  }\n};\n\nexport { reducer, initialState };\n","import React, { useEffect, useReducer } from \"react\";\nimport { API } from \"aws-amplify\";\nimport { List, Input, Button } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport { v4 as uuid } from \"uuid\";\nimport { listNotes } from \"./graphql/queries\";\nimport {\n  onCreateNote,\n  onDeleteNote,\n  onUpdateNote,\n} from \"./graphql/subscriptions\";\nimport {\n  updateNote as UpdateNote,\n  createNote as CreateNote,\n  deleteNote as DeleteNote,\n} from \"./graphql/mutations\";\nimport { reducer, initialState } from \"./Reducer.js\";\nimport \"./App.css\";\n\nconst CLIENT_ID = uuid();\n\nconst App = () => {\n  const [state, dispatch] = useReducer(reducer, initialState);\n\n  const fetchNotes = async () => {\n    try {\n      const notesData = await API.graphql({\n        query: listNotes,\n      });\n      dispatch({ type: \"SET_NOTES\", notes: notesData.data.listNotes.items });\n    } catch (err) {\n      console.error(err);\n      dispatch({ type: \"ERROR\" });\n    }\n  };\n\n  const createNote = async () => {\n    const { form } = state; //destructuring - form element out of state\n\n    if (!form.name || !form.description) {\n      return alert(\"please enter a name and description\");\n    }\n\n    const note = { ...form, clientId: CLIENT_ID, completed: false, id: uuid() };\n    dispatch({ type: \"ADD_NOTE\", note });\n    dispatch({ type: \"RESET_FORM\" });\n\n    try {\n      await API.graphql({\n        query: CreateNote,\n        variables: { input: note },\n      });\n      console.log(\"successfully created note!\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const deleteNote = async ({ id }) => {\n    try {\n      await API.graphql({\n        query: DeleteNote,\n        variables: { input: { id } },\n      });\n      console.log(\"successfully deleted note!\");\n    } catch (err) {\n      console.error(err);\n    }\n  };\n\n  const updateNote = async(note) => {\n    const index = state.notes.findIndex(n => n.id === note.id)\n    const notes = [...state.notes]\n    notes[index].completed = !note.completed\n    //dispatch({ type: 'SET_NOTES', notes})\n    try {\n      await API.graphql({\n        query: UpdateNote,\n        variables: { input: { id: note.id, completed: notes[index].completed } }\n      })\n      console.log('note successfully updated!')\n    } catch (err) {\n      console.error(err)\n    }\n};\n\n\n  const onChange = (e) => {\n    dispatch({ type: \"SET_INPUT\", name: e.target.name, value: e.target.value });\n  };\n\n  useEffect(() => {\n    fetchNotes();\n    const createSubscription = API.graphql({\n      query: onCreateNote,\n    }).subscribe({\n      next: (noteData) => {\n        const note = noteData.value.data.onCreateNote;\n        if (CLIENT_ID === note.clientId) return;\n        dispatch({ type: \"ADD_NOTE\", note });\n      },\n    });\n\n    const deleteSubscription = API.graphql({\n      query: onDeleteNote,\n    }).subscribe({\n      next: (noteData) => {\n        const noteId = noteData.value.data.onDeleteNote.id;\n        dispatch({ type: \"REMOVE_NOTE\", id: noteId });\n      },\n    });\n\n    const updateSubscription = API.graphql({\n      query: onUpdateNote\n      })\n      .subscribe({\n          next: noteData => {\n          const updatedNote = noteData.value.data.onUpdateNote\n          dispatch({ type: 'UPDATE_NOTE', note: updatedNote })\n          }\n      })\n\n    return () => {\n      createSubscription.unsubscribe();\n      deleteSubscription.unsubscribe();\n      updateSubscription.unsubscribe();\n    };\n  }, []);\n\n  const styles = {\n    container: { padding: 20 },\n    input: { marginBottom: 10 },\n    item: { textAlign: \"left\" },\n    p: { color: \"#1890ff\" },\n  };\n\n  const sort = () => {\n    dispatch({ type: \"SORT\" });\n    dispatch({type: 'UPDATE_NOTE '});\n  };\n\n  const RenderItem = (item) => {\n\n    return (\n          \n      <List.Item\n        style={styles.item}\n        actions={[\n          <p style={styles.p} onClick={() => deleteNote(item)}>\n            Delete\n          </p>,\n         <input type=\"checkbox\" checked={item.completed ? true: false } onChange={()=> updateNote(item)} />\n        ]}\n        >\n        <List.Item.Meta title={item.name} description={item.description} />\n      </List.Item>\n            \n   );\n  };\n\n  return (\n    <div style={styles.container}>\n      <Input\n        onChange={onChange}\n        value={state.form.name}\n        placeholder=\"Note Name\"\n        name=\"name\"\n        style={styles.input}\n      />\n      <Input\n        onChange={onChange}\n        value={state.form.description}\n        placeholder=\"Note description\"\n        name=\"description\"\n        style={styles.input}\n      />\n      <Button onClick={createNote} type=\"primary\">\n        Create Note\n      </Button>\n      <hr />\n      <Button onClick={sort} type=\"primary\">\n        Sort\n      </Button>\n      <hr />\n      <h2>\n        {state.notes.filter(x => x.completed === true).length} completed / {state.notes.length} total\n      </h2>\n      <hr />\n      <List\n        loading={state.loading}\n        dataSource={state.notes}\n        renderItem={RenderItem}\n\n      />\n    </div>\n  );\n};\n\nexport default App;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const getNote = /* GraphQL */ `\n  query GetNote($id: ID!) {\n    getNote(id: $id) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const listNotes = /* GraphQL */ `\n  query ListNotes(\n    $filter: ModelNoteFilterInput\n    $limit: Int\n    $nextToken: String\n  ) {\n    listNotes(filter: $filter, limit: $limit, nextToken: $nextToken) {\n      items {\n        id\n        clientId\n        name\n        description\n        completed\n        createdAt\n        updatedAt\n      }\n      nextToken\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const createNote = /* GraphQL */ `\n  mutation CreateNote(\n    $input: CreateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    createNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const updateNote = /* GraphQL */ `\n  mutation UpdateNote(\n    $input: UpdateNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    updateNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const deleteNote = /* GraphQL */ `\n  mutation DeleteNote(\n    $input: DeleteNoteInput!\n    $condition: ModelNoteConditionInput\n  ) {\n    deleteNote(input: $input, condition: $condition) {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","/* eslint-disable */\n// this is an auto generated file. This will be overwritten\n\nexport const onCreateNote = /* GraphQL */ `\n  subscription OnCreateNote {\n    onCreateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onUpdateNote = /* GraphQL */ `\n  subscription OnUpdateNote {\n    onUpdateNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\nexport const onDeleteNote = /* GraphQL */ `\n  subscription OnDeleteNote {\n    onDeleteNote {\n      id\n      clientId\n      name\n      description\n      completed\n      createdAt\n      updatedAt\n    }\n  }\n`;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/* eslint-disable */\n// WARNING: DO NOT EDIT. This file is automatically generated by AWS Amplify. It will be overwritten.\n\nconst awsmobile = {\n    \"aws_project_region\": \"us-east-2\",\n    \"aws_appsync_graphqlEndpoint\": \"https://ewtan3pkmjgtjfijdlgyqc42sa.appsync-api.us-east-2.amazonaws.com/graphql\",\n    \"aws_appsync_region\": \"us-east-2\",\n    \"aws_appsync_authenticationType\": \"API_KEY\",\n    \"aws_appsync_apiKey\": \"da2-vn5gtwlypnaa7o2u4lpoqcgnze\"\n};\n\n\nexport default awsmobile;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Amplify from \"aws-amplify\";\nimport config from './aws-exports'\n\nAmplify.configure(config);\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}